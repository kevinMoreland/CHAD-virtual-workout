[{"C:\\Users\\kmmor\\chad-virtual-workout\\src\\index.js":"1","C:\\Users\\kmmor\\chad-virtual-workout\\src\\reportWebVitals.js":"2","C:\\Users\\kmmor\\chad-virtual-workout\\src\\Welcome.js":"3","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SetTime.js":"4","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SetWorkout.js":"5","C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\ScreenNames.js":"6","C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\ExerciseGroups.js":"7","C:\\Users\\kmmor\\chad-virtual-workout\\src\\Workout.js":"8","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SetRest.js":"9","C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\ActivityArray.js":"10","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SubComponents\\ConfirmBox.js":"11","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SubComponents\\AlertBoxWithVideo.js":"12","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SubComponents\\Toast.js":"13","C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\BackgroundColorBehavior.js":"14","C:\\Users\\kmmor\\chad-virtual-workout\\src\\WorkoutComplete.js":"15"},{"size":10726,"mtime":1609709917014,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1397,"mtime":1609721139633,"results":"19","hashOfConfig":"17"},{"size":840,"mtime":1609540639784,"results":"20","hashOfConfig":"17"},{"size":1533,"mtime":1609540639790,"results":"21","hashOfConfig":"17"},{"size":222,"mtime":1609550109019,"results":"22","hashOfConfig":"17"},{"size":116,"mtime":1609300572651,"results":"23","hashOfConfig":"17"},{"size":5949,"mtime":1609721013858,"results":"24","hashOfConfig":"17"},{"size":1419,"mtime":1609540889539,"results":"25","hashOfConfig":"17"},{"size":200,"mtime":1609632224477,"results":"26","hashOfConfig":"17"},{"size":1221,"mtime":1609469203391,"results":"27","hashOfConfig":"17"},{"size":1337,"mtime":1609472030069,"results":"28","hashOfConfig":"17"},{"size":1019,"mtime":1609649346031,"results":"29","hashOfConfig":"17"},{"size":283,"mtime":1609545285203,"results":"30","hashOfConfig":"17"},{"size":488,"mtime":1609550109115,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"1iujop5",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"35"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"C:\\Users\\kmmor\\chad-virtual-workout\\src\\index.js",["67","68","69"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport screenNames from './variables/ScreenNames'\nimport exerciseGroups from './variables/ExerciseGroups'\nimport activityObjectElements from './variables/ActivityArray'\nimport backgroundColorBehavior from './variables/BackgroundColorBehavior'\nimport reportWebVitals from './reportWebVitals';\nimport Welcome from './Welcome';\nimport WorkoutComplete from './WorkoutComplete';\nimport SetTime from './SetTime';\nimport SetWorkout from './SetWorkout';\nimport SetRest from './SetRest';\nimport Workout from './Workout';\nimport './mainStyle.css';\nimport './index.css';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#FF6161',\n      contrastText: \"#fff\"\n    },\n  }\n});\nconst oneSecondInMilli = 1000;\n\nclass SiteWrapper extends React.Component{\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      screen: screenNames.WELCOME,\n      workoutLength: 45,\n      selectedExerciseGroups: [],\n      workRestRatio: 3,\n      activities: [],\n      currentIndexInWorkout: 0,\n      timeInSecIntoCurrExercise: 0,\n      timeLeftInWorkoutTotal: 45 * 60,\n      backgroundHue: 198,\n      backgroundSat: backgroundColorBehavior.MID_SATURATION,\n      backGroundBehavior: backgroundColorBehavior.RAINBOW,\n      workoutStartTime: 0,\n      workoutEndTime: 0,\n      workoutPauseStartTime: 0,\n      workoutPaused: true\n    }\n    this.pauseWorkout=this.pauseWorkout.bind(this);\n    this.resetWorkoutData=this.resetWorkoutData.bind(this);\n    this.updateWorkoutTimer=this.updateWorkoutTimer.bind(this);\n    this.resumeWorkout=this.resumeWorkout.bind(this);\n    this.changeScreenTo=this.changeScreenTo.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      if(this.state.backGroundBehavior === backgroundColorBehavior.RAINBOW) {\n        this.setState({\n          backgroundHue: (this.state.backgroundHue + 50) % 360,\n          backgroundSat: backgroundColorBehavior.MID_SATURATION\n        })\n      }\n      else if(this.state.backGroundBehavior === backgroundColorBehavior.SATURATION_PULSE) {\n        this.setState({\n          backgroundSat: this.state.backgroundSat === backgroundColorBehavior.HIGHER_SATURATION ?\n            backgroundColorBehavior.LOWER_SATURATION : backgroundColorBehavior.HIGHER_SATURATION\n        })\n      }\n      else if(this.state.backGroundBehavior === backgroundColorBehavior.SATURATION_PULSE_WITH_WORKOUT) {\n        this.setState({\n          backgroundHue: (this.state.currentIndexInWorkout * 70) % 360,\n          backgroundSat: this.state.backgroundSat === backgroundColorBehavior.HIGHER_SATURATION ?\n            backgroundColorBehavior.LOWER_SATURATION : backgroundColorBehavior.HIGHER_SATURATION\n        })\n      }\n    }, 2000);\n  }\n\n  resetWorkoutData() {\n    this.setState({\n      workoutLength: 45,\n      selectedExerciseGroups: [],\n      workRestRatio: 3,\n      activities: [],\n      currentIndexInWorkout: 0,\n      timeInSecIntoCurrExercise: 0,\n      timeLeftInWorkoutTotal: 45 * 60,\n      workoutStartTime: 0,\n      workoutEndTime: 0,\n      workoutPauseStartTime: 0,\n      workoutPaused: true,\n    });\n    clearTimeout(this.timeout);\n  }\n  pauseWorkout() {\n    var currentTime = ( new Date() ).getTime();\n    this.setState({\n      workoutPaused: true,\n      workoutPauseStartTime: currentTime})\n  }\n  updateWorkoutTimer() {\n    var currentTime = ( new Date() ).getTime();\n    if(this.state.timeLeftInWorkoutTotal > 0) {\n      this.timeout = setTimeout(this.updateWorkoutTimer, oneSecondInMilli);\n    }\n    if(!this.state.workoutPaused) {\n      //increment time passed in the exercise\n      this.setState({\n        timeInSecIntoCurrExercise: this.state.timeInSecIntoCurrExercise + 1,\n        timeLeftInWorkoutTotal: this.state.timeLeftInWorkoutTotal - 1});\n\n      //if no more exercises, workout complete\n      if(this.state.currentIndexInWorkout >= this.state.activities.length) {\n        this.resetWorkoutData();\n        this.changeScreenTo(screenNames.WORKOUT_COMPLETE);\n        return;\n      }\n\n      //if time has exceeded this exercise, move to next exercise\n      var currentExercise = this.state.activities[this.state.currentIndexInWorkout];\n      if(this.state.timeInSecIntoCurrExercise === currentExercise[activityObjectElements.TIME_IN_SEC]) {\n        this.setState({\n          timeInSecIntoCurrExercise: 0,\n          currentIndexInWorkout: this.state.currentIndexInWorkout + 1\n        });\n\n        //conditional prevents this from playing at end of last exercise\n        if(this.state.currentIndexInWorkout < this.state.activities.length) {\n          document.getElementById(\"audio-doubleBeep\").play();\n        }\n      }\n    }\n  }\n  resumeWorkout() {\n    var startingWorkout = (this.state.currentIndexInWorkout == 0 && this.state.timeInSecIntoCurrExercise == 0);\n    var currentTime = ( new Date() ).getTime();\n    if(startingWorkout) {\n      this.setState({\n        workoutStartTime: currentTime,\n        workoutEndTime: currentTime + this.state.workoutLength * 60 * oneSecondInMilli,\n        workoutPaused: false\n      }, () => (this.updateWorkoutTimer()));\n    }\n    else {\n      this.setState({\n        workoutPaused: false,\n        workoutEndTime: this.state.workoutEndTime + (currentTime - this.state.workoutPauseStartTime)\n      });\n    }\n  }\n  setExerciseGroups(i) {\n    if(this.state.selectedExerciseGroups.includes(i)) {\n      const index = this.state.selectedExerciseGroups.indexOf(i);\n      this.setState({\n        selectedExerciseGroups: this.state.selectedExerciseGroups.slice(0, index).concat(\n          this.state.selectedExerciseGroups.slice(index + 1)),\n      });\n    }\n    else {\n      this.setState({\n        selectedExerciseGroups: this.state.selectedExerciseGroups.concat([i]),\n      });\n    }\n  }\n  setWorkRestRatio(i) {\n    this.setState({\n      workRestRatio: i,\n    });\n  }\n\n  updateBackgroundTransitions(i) {\n    const pulseScreens = [screenNames.WORKOUT];\n    this.setState({\n          backGroundBehavior: pulseScreens.includes(i) ? backgroundColorBehavior.SATURATION_PULSE_WITH_WORKOUT : backgroundColorBehavior.RAINBOW\n    });\n  }\n  changeScreenTo(i) {\n    this.updateBackgroundTransitions(i);\n\n    //generate workout before accessing workout screen\n    if(i === screenNames.WORKOUT) {\n      this.getWorkout();\n    }\n    else if(i === screenNames.WORKOUT_COMPLETE) {\n      document.getElementById(\"audio-success\").play();\n    }\n\n    //change screen\n    this.setState({\n      screen: i,\n    });\n  }\n  addMinutesToWorkout(i) {\n    if(this.state.workoutLength + i > 0 && this.state.workoutLength + i <= 180)\n    this.setState({\n      workoutLength: this.state.workoutLength + i,\n      timeLeftInWorkoutTotal: (this.state.workoutLength + i) * 60\n    });\n  }\n\n  async getWorkout() {\n    const params =  '?workoutLength=' + this.state.workoutLength\n                  + '&hasUpper='      + this.state.selectedExerciseGroups.includes(exerciseGroups.UPPER)\n                  + '&hasLower='      + this.state.selectedExerciseGroups.includes(exerciseGroups.LOWER)\n                  + '&hasCore='       + this.state.selectedExerciseGroups.includes(exerciseGroups.CORE)\n                  + '&workRestRatio=' + this.state.workRestRatio;\n    const url = 'https://x9txjb9yi5.execute-api.eu-west-1.amazonaws.com/staging/workout' + params;\n    const response = await fetch(url);\n    const data = await response.json();\n    var activitiesArray = data.map(activity =>\n      {var mappedTo = new Array(activityObjectElements.NUM_ELEMENTS);\n       mappedTo[activityObjectElements.NAME] = activity.name;\n       mappedTo[activityObjectElements.DESC] = activity.description;\n       mappedTo[activityObjectElements.TIME_IN_SEC] = parseInt(activity.amountTime);\n       mappedTo[activityObjectElements.NUM_REPS] = activity.numReps;\n       mappedTo[activityObjectElements.NUM_SEC_TO_DO_REPS] = activity.numSecToDoReps;\n       mappedTo[activityObjectElements.VIDEO_URL] = activity.videoURL;\n       return mappedTo;});\n    this.setState({\n      activities: activitiesArray\n    });\n  }\n  render() {\n    let pageHTML = (<h1>Page Not Found</h1>);\n    if(this.state.screen === screenNames.WELCOME) {\n      pageHTML = (<Welcome onClickNewScreen={(i) => this.changeScreenTo(i)}/>);\n    }\n    else if(this.state.screen === screenNames.SET_TIME) {\n      pageHTML = (<SetTime workoutLength={this.state.workoutLength}\n                       onClickNewScreen={(i) => this.changeScreenTo(i)}\n                       onClickTimer={(i) => this.addMinutesToWorkout(i)}/>);\n    }\n    else if(this.state.screen === screenNames.SET_WORKOUT) {\n      pageHTML = (<SetWorkout onClickNewScreen={(i) => this.changeScreenTo(i)}\n                          onClickSetWorkoutType={(i) => this.setExerciseGroups(i)}\n                          selectedExerciseGroups={this.state.selectedExerciseGroups}/>);\n    }\n    else if(this.state.screen === screenNames.SET_REST) {\n      pageHTML = (<SetRest onClickNewScreen={(i) => this.changeScreenTo(i)}\n                       onClickSetWorkRestRatio={(i) => this.setWorkRestRatio(i)}\n                       workRestRatio={this.state.workRestRatio}/>);\n    }\n    else if(this.state.screen === screenNames.WORKOUT) {\n      pageHTML = (<Workout onClickNewScreen={(i) => this.changeScreenTo(i)}\n                       activities={this.state.activities}\n                       currentIndexInWorkout={this.state.currentIndexInWorkout}\n                       timeInSecIntoCurrExercise={this.state.timeInSecIntoCurrExercise}\n                       workoutPaused={this.state.workoutPaused}\n                       onClickPause={()=>this.pauseWorkout()}\n                       onClickResume={()=>this.resumeWorkout()}\n                       onClickResetWorkoutData={()=>this.resetWorkoutData()}\n                       timeLeftInWorkoutTotal={this.state.timeLeftInWorkoutTotal}\n                       />);\n    }\n    else if(this.state.screen === screenNames.WORKOUT_COMPLETE) {\n     pageHTML = (<WorkoutComplete onClickNewScreen={(i) => this.changeScreenTo(i)}\n                                  />);\n    }\n\n    var hslValue = \"hsl(\" + this.state.backgroundHue + \", \" + this.state.backgroundSat + \"%, 75%)\";\n    return <div className=\"backgroundPulse\" style={{backgroundColor: hslValue}}>{pageHTML}</div>\n  }\n\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={theme}>\n      <SiteWrapper />\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["70","71"],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\reportWebVitals.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\Welcome.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\SetTime.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\SetWorkout.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\ScreenNames.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\ExerciseGroups.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\Workout.js",["72","73"],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\SetRest.js",["74","75","76","77","78"],"import { Button } from '@material-ui/core';\r\nimport './mainStyle.css';\r\nimport screenNames from './variables/ScreenNames'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nfunction SetRest(props) {\r\n\r\n  return (\r\n    <div className=\"centerWrapper\">\r\n      <h1>How much rest do you need?</h1>\r\n      <div className=\"centerRow\">\r\n        <Button color=\"primary\" variant={props.workRestRatio == 5 ? \"contained\" : \"outlined\"}\r\n                onClick={() => props.onClickSetWorkRestRatio(5)}>Less Rest</Button>\r\n        &nbsp;\r\n        <Button color=\"primary\" variant={props.workRestRatio == 3 ? \"contained\" : \"outlined\"}\r\n                onClick={() => props.onClickSetWorkRestRatio(3)}>Medium Rest</Button>\r\n        &nbsp;\r\n        <Button color=\"primary\" variant={props.workRestRatio == 1 ? \"contained\" : \"outlined\"}\r\n                onClick={() => props.onClickSetWorkRestRatio(1)}>More Rest</Button>\r\n      </div>\r\n      &nbsp;\r\n      <div className=\"centerRow\">\r\n        <Button color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={() => props.onClickNewScreen(screenNames.SET_WORKOUT)}>Back</Button>\r\n        &nbsp;\r\n        <Button color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={() => props.onClickNewScreen(screenNames.WORKOUT)}>Let's go!</Button>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SetRest;\r\n","C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\ActivityArray.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\SubComponents\\ConfirmBox.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\SubComponents\\AlertBoxWithVideo.js",["79"],"import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nfunction AlertBoxWithVideo(props) {\r\n    return (\r\n      <Dialog\r\n        open={props.open}\r\n        onClose={()=>props.handleClose()}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\">\r\n        <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n          <iframe\r\n            id=\"video\"\r\n            width=\"560\" height=\"315\"\r\n            src={props.videoURL}\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer, autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen\r\n          />\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={()=>props.handleClose()} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n\r\n}\r\n\r\nexport default AlertBoxWithVideo;","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SubComponents\\Toast.js",["80"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//also accept an audio to play as option\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(0),\r\n    },\r\n    \"& .MuiAlert-icon\": {\r\n          fontSize: 0\r\n    },\r\n  },\r\n}));\r\n\r\nfunction Toast(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Snackbar open={props.open}\r\n                anchorOrigin={{vertical: props.verticalPos, horizontal: props.horizontalPos}}>\r\n        <Alert severity={props.type}>\r\n          <h2 style={{marginRight:24, marginLeft:20}}>{props.message}</h2>\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Toast;\r\n","C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\BackgroundColorBehavior.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\WorkoutComplete.js",[],{"ruleId":"81","severity":1,"message":"82","line":104,"column":9,"nodeType":"83","messageId":"84","endLine":104,"endColumn":20},{"ruleId":"85","severity":1,"message":"86","line":137,"column":61,"nodeType":"87","messageId":"88","endLine":137,"endColumn":63},{"ruleId":"85","severity":1,"message":"86","line":137,"column":106,"nodeType":"87","messageId":"88","endLine":137,"endColumn":108},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"85","severity":1,"message":"86","line":57,"column":23,"nodeType":"87","messageId":"88","endLine":57,"endColumn":25},{"ruleId":"81","severity":1,"message":"93","line":74,"column":9,"nodeType":"83","messageId":"84","endLine":74,"endColumn":18},{"ruleId":"81","severity":1,"message":"94","line":4,"column":8,"nodeType":"83","messageId":"84","endLine":4,"endColumn":13},{"ruleId":"81","severity":1,"message":"95","line":5,"column":8,"nodeType":"83","messageId":"84","endLine":5,"endColumn":12},{"ruleId":"85","severity":1,"message":"86","line":13,"column":62,"nodeType":"87","messageId":"88","endLine":13,"endColumn":64},{"ruleId":"85","severity":1,"message":"86","line":16,"column":62,"nodeType":"87","messageId":"88","endLine":16,"endColumn":64},{"ruleId":"85","severity":1,"message":"86","line":19,"column":62,"nodeType":"87","messageId":"88","endLine":19,"endColumn":64},{"ruleId":"96","severity":1,"message":"97","line":20,"column":11,"nodeType":"98","endLine":27,"endColumn":13},{"ruleId":"81","severity":1,"message":"99","line":2,"column":8,"nodeType":"83","messageId":"84","endLine":2,"endColumn":14},"no-unused-vars","'currentTime' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["100"],"no-negated-in-lhs",["101"],"'isForTime' is assigned a value but never used.","'Paper' is defined but never used.","'Fade' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]