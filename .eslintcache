[{"C:\\Users\\kmmor\\chad-virtual-workout\\src\\index.js":"1","C:\\Users\\kmmor\\chad-virtual-workout\\src\\reportWebVitals.js":"2","C:\\Users\\kmmor\\chad-virtual-workout\\src\\Welcome.js":"3","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SetTime.js":"4","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SetWorkout.js":"5","C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\ScreenNames.js":"6","C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\ExerciseGroups.js":"7","C:\\Users\\kmmor\\chad-virtual-workout\\src\\Workout.js":"8"},{"size":2789,"mtime":1609212041840,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":492,"mtime":1609149569393,"results":"12","hashOfConfig":"10"},{"size":875,"mtime":1609149569413,"results":"13","hashOfConfig":"10"},{"size":1531,"mtime":1609149569403,"results":"14","hashOfConfig":"10"},{"size":157,"mtime":1609148642684,"results":"15","hashOfConfig":"10"},{"size":136,"mtime":1609146953053,"results":"16","hashOfConfig":"10"},{"size":555,"mtime":1609149615179,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"1iujop5",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"21"},"C:\\Users\\kmmor\\chad-virtual-workout\\src\\index.js",["41","42","43","44","45"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { API } from 'aws-amplify';\n\nimport './index.css';\nimport screenNames from './variables/ScreenNames'\nimport exerciseGroups from './variables/ExerciseGroups'\nimport reportWebVitals from './reportWebVitals';\nimport Welcome from './Welcome';\nimport SetTime from './SetTime';\nimport SetWorkout from './SetWorkout';\nimport Workout from './Workout';\n\nclass SiteWrapper extends React.Component{\n  async componentDidMount() {\n    const data = await API.get('chadApi', '/workout')\n    console.log(data);\n  }\n  constructor(props) {\n    super(props)\n    this.state = {\n      screen: screenNames.WELCOME,\n      minutes: 45,\n      selectedExerciseGroups: []\n    }\n  }\n  setExerciseGroups(i) {\n    if(this.state.selectedExerciseGroups.includes(i)) {\n      const index = this.state.selectedExerciseGroups.indexOf(i);\n      this.setState({\n        selectedExerciseGroups: this.state.selectedExerciseGroups.slice(0, index).concat(\n          this.state.selectedExerciseGroups.slice(index + 1)),\n      });\n    }\n    else {\n      this.setState({\n        selectedExerciseGroups: this.state.selectedExerciseGroups.concat([i]),\n      });\n    }\n  }\n  changeScreenTo(i, warningEnabled) {\n    //some sort of transition?\n    //http://reactcommunity.org/react-transition-group/transition\n    if(warningEnabled) {\n      alert(\"Add a warning here to ensure a use is sure about action\");\n    }\n    this.setState({\n      screen: i,\n    });\n\n  }\n  addMinutes(i) {\n    if(this.state.minutes + i > 0 && this.state.minutes + i <= 180)\n    this.setState({\n        minutes: this.state.minutes + i,\n    });\n  }\n  render() {\n    if(this.state.screen == screenNames.WELCOME) {\n      return (<Welcome onClickNewScreen={(i, b) => this.changeScreenTo(i, b)}/>);\n    }\n    else if(this.state.screen == screenNames.SET_TIME) {\n      return (<SetTime minutes={this.state.minutes}\n                       onClickNewScreen={(i, b) => this.changeScreenTo(i, b)}\n                       onClickTimer={(i) => this.addMinutes(i)}/>);\n    }\n    else if(this.state.screen == screenNames.SET_WORKOUT) {\n      return (<SetWorkout onClickNewScreen={(i, b) => this.changeScreenTo(i, b)}\n                          onClickSetWorkoutType={(i) => this.setExerciseGroups(i)}/>);\n    }\n    else if(this.state.screen == screenNames.WORKOUT) {\n      return (<Workout onClickNewScreen={(i, b) => this.changeScreenTo(i, b)}/>);\n    }\n  }\n\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <SiteWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["46","47"],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\reportWebVitals.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\Welcome.js",["48"],"import { Button } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport screenNames from './variables/ScreenNames'\nimport './CenterWrapper.css';\n\nfunction Welcome(props) {\n  return (\n    <div className=\"centerWrapper\">\n        <h1>Welcome to CHAD.</h1>\n        <Button color=\"primary\"\n                variant=\"contained\"\n                onClick={() => props.onClickNewScreen(screenNames.SET_TIME, false)}>Begin Workout</Button>\n    </div>\n  );\n}\n\nexport default Welcome;\n","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SetTime.js",["49","50"],"import { Button } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\nimport './CenterWrapper.css';\r\nimport screenNames from './variables/ScreenNames'\r\n\r\nfunction SetTime(props) {\r\n\r\n  return (\r\n    <div className=\"centerWrapper\">\r\n      <h1>How long do you want to workout?</h1>\r\n      <h1>0{Math.floor(props.minutes / 60)}:{props.minutes % 60 == 0 ? \"0\" : \"\"}{props.minutes % 60}</h1>\r\n      <div className=\"centerRow\">\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => props.onClickTimer(-15)}>-</Button>\r\n        &nbsp;\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => props.onClickTimer(15)}>+</Button>\r\n      </div>\r\n      &nbsp;\r\n      <Button color=\"primary\" variant=\"contained\" onClick={() => props.onClickNewScreen(screenNames.SET_WORKOUT, false)}>ok!</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SetTime;\r\n","C:\\Users\\kmmor\\chad-virtual-workout\\src\\SetWorkout.js",["51"],"import { Button } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\nimport './CenterWrapper.css';\r\nimport screenNames from './variables/ScreenNames'\r\nimport exerciseGroups from './variables/ExerciseGroups'\r\n\r\nfunction SetWorkout(props) {\r\n\r\n  return (\r\n    <div className=\"centerWrapper\">\r\n      <h1>What do you want to exercise?</h1>\r\n      <div className=\"centerRow\">\r\n        <Button color=\"primary\" variant=\"contained\"\r\n                onClick={() => props.onClickSetWorkoutType(exerciseGroups.UPPER)}>Upper</Button>\r\n        &nbsp;\r\n        <Button color=\"primary\" variant=\"contained\"\r\n                onClick={() => props.onClickSetWorkoutType(exerciseGroups.LOWER)}>Lower</Button>\r\n        &nbsp;\r\n        <Button color=\"primary\" variant=\"contained\"\r\n                onClick={() => props.onClickSetWorkoutType(exerciseGroups.CORE)}>Core</Button>\r\n        &nbsp;\r\n        <Button color=\"primary\" variant=\"contained\"\r\n                onClick={() => props.onClickSetWorkoutType(exerciseGroups.CARDIO)}>Cardio</Button>\r\n      </div>\r\n      &nbsp;\r\n      <div className=\"centerRow\">\r\n        <Button color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={() => props.onClickNewScreen(screenNames.SET_TIME, false)}>Back</Button>\r\n        &nbsp;\r\n        <Button color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={() => props.onClickNewScreen(screenNames.WORKOUT, false)}>Let's go!</Button>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SetWorkout;\r\n","C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\ScreenNames.js",[],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\variables\\ExerciseGroups.js",[],["52","53"],"C:\\Users\\kmmor\\chad-virtual-workout\\src\\Workout.js",["54"],"import { Button } from '@material-ui/core';\r\nimport { Grid } from '@material-ui/core';\r\nimport screenNames from './variables/ScreenNames'\r\nimport './CenterWrapper.css';\r\n\r\nfunction Workout(props) {\r\n  return (\r\n    <div className=\"centerWrapper\">\r\n        <h1>[Graphic]</h1>\r\n        <h1>Workout Name Here</h1>\r\n        <h1>00:00</h1>\r\n        <Button color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={() => props.onClickNewScreen(screenNames.SET_WORKOUT, true)}>Back</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Workout;\r\n",{"ruleId":"55","severity":1,"message":"56","line":7,"column":8,"nodeType":"57","messageId":"58","endLine":7,"endColumn":22},{"ruleId":"59","severity":1,"message":"60","line":59,"column":26,"nodeType":"61","messageId":"62","endLine":59,"endColumn":28},{"ruleId":"59","severity":1,"message":"60","line":62,"column":31,"nodeType":"61","messageId":"62","endLine":62,"endColumn":33},{"ruleId":"59","severity":1,"message":"60","line":67,"column":31,"nodeType":"61","messageId":"62","endLine":67,"endColumn":33},{"ruleId":"59","severity":1,"message":"60","line":71,"column":31,"nodeType":"61","messageId":"62","endLine":71,"endColumn":33},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"55","severity":1,"message":"67","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":14},{"ruleId":"55","severity":1,"message":"67","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":14},{"ruleId":"59","severity":1,"message":"60","line":11,"column":65,"nodeType":"61","messageId":"62","endLine":11,"endColumn":67},{"ruleId":"55","severity":1,"message":"67","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":14},{"ruleId":"63","replacedBy":"68"},{"ruleId":"65","replacedBy":"69"},{"ruleId":"55","severity":1,"message":"67","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":14},"no-unused-vars","'exerciseGroups' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["70"],"no-negated-in-lhs",["71"],"'Grid' is defined but never used.",["70"],["71"],"no-global-assign","no-unsafe-negation"]